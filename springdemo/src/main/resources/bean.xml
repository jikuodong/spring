<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->

    <!--1.创建bean的三种方式-->
    <!--第一种方式：适用默认构造函数创建。
        在spring 的配置稳健者红适用bean标签，配以id和class属性之后，且没有其他属性和标签时。
        采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。
        <bean id="accountService" class="com.jkd.service.impl.AccountServiceImpl"></bean>
    -->

    <!--第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）

        <bean id="instaceFactory" class="com.jkd1.factory.InstanceFactory"></bean>
        <bean id="accountService" factory-bean="instaceFactory" factory-method="getAccountService"></bean>
    -->

    <!--第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）
        <bean id="accountService" class="com.jkd1.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->


    <!--2.bean的作用范围调整
        bean标签的scope 属性：
        作用： 用于指定bean的作用范围
        取值：
            singleton: 单例的（默认值）
            prototype: 多例的
            request: 作用于web应用的请求范围
            session: 作用于web应用的会话范围
            global-session: 作用于集群环境的会话范围（全局会话范围），当不是集群环境时，他就是session
            <bean id="accountService" class="com.jkd1.factory.StaticFactory" factory-method="getAccountService" scope="singleton"></bean>
    -->

    <!--3.bean对象的生命周期
        单例对象
            出生： 当容器创建时对象出生
            活着： 只要容器还在，对象一直活着
            死亡： 容器销毁，对象消亡
            总结： 单例对象的生命周期和容器相同。
        多例对象
            出生： 当使用对象时spring框架为我们创建。
            活着： 对象只要在使用过程中就一直活着。
            死亡： 当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收。
    -->


    <!--spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降低程序间的耦合（依赖关系）
        依赖关系的管理：
            以后都交给Spring来维护
        在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护：
            就称之为依赖注入。
        依赖注入：
            能注入的数据：有三类
                基本类型和String
                其他bean类型（在配置文件中或者注解配置过的bean）
                复杂类型/集合类型
            注入的方式： 有三种
                第一种： 使用构造函数提供
                第二种： 使用set方法提供
                第三种： 使用注解提供
    -->

    <!--构造函数注入
        使用的标签：constructor-arg
        标签出现的位置： bean标签的内部
        标签中的属性：
            type: 用于指定要注入数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型。
            index: 用于指定要注入的数据给构造函数中执行索引位置的参数赋值。索引的位置是从0开始。
            name: 用于指定给构造函数中指定名称的参数赋值                常用的
            ============以上三个用于指定给构造函数中哪个参数赋值======================
            value:
            ref:

    -->
    <bean id="accountService" class="com.jkd1.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthDay" value="1970-01-01"></constructor-arg>
    </bean>

</beans>
